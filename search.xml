<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[maven]]></title>
      <url>http://zhoufangy.github.io/2020/02/24/maven-1/</url>
      <content type="html"><![CDATA[<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><pre><code>clean install -X
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Introduce]]></title>
      <url>http://zhoufangy.github.io/2020/02/21/Introduce/</url>
      <content type="html"><![CDATA[<p>Good afternoon! </p>
<p>It’s really my honor to have this opportunity for this interview. </p>
<p>First let me introduce myself. I’m Fangyuan Zhou, I currently live in Shanghai. I was born in 1992. I like reading at my free time. and I like challenge myself like skidiving. But I’ll never do it again. And my hometown is Changde, the city of Hunan province. And I graduated from Hunan normal University Shuda college in 2014. My major is Computer Science and Technology, I had five years full-time work experience in two Shenzhen companies. then I went to Ireland for learning Engish, During this period of time I had Three months part-time work experience in a Hangzhou company. and travel alone 11 countries.</p>
<p>I worked for aisidi company as a Engineer from 2014 to 2016 for Yihaoji B2B website.</p>
<p>I worked for Hundsun Technologies Inc. as a Engineer from 2016 to 2018. I had three projets. First one is Guohai Securities Office Management Platform. It’s an OA project . Secound one is Cockpit, Cockpit is an analysis system based on Big Data.<br>Last one is GF Securities logging streaming system. It’s an analysis platform for logging streaming. During this period of time I spent free time to leaning and got Project Management Professional certificate.</p>
<p>I worked for Hangzhou YIRU TECHNOLOGIES. as a part time Engineer from 2018 to 2019. My major project is Alora Valley. It’s an e-business system based on WeChat. I was responsible for design and development of some functional modules.</p>
<p>I’m a quick learner and a good team player. I’m good at communicating with players. </p>
<p>That’s all, thanks </p>]]></content>
      
        
        <tags>
            
            <tag> Introduce </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[版本控制]]></title>
      <url>http://zhoufangy.github.io/2020/02/20/git/</url>
      <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>###</p>
<h1 id="Git和Svn区别"><a href="#Git和Svn区别" class="headerlink" title="Git和Svn区别"></a>Git和Svn区别</h1>]]></content>
      
        
        <tags>
            
            <tag> git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java基础]]></title>
      <url>http://zhoufangy.github.io/2020/02/20/Java%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h3 id="1-面向对象和面向过程"><a href="#1-面向对象和面向过程" class="headerlink" title="1.面向对象和面向过程"></a>1.面向对象和面向过程</h3><pre><code>面向过程性能更高，但是面向对象易维护、易复用、易扩展
</code></pre><h3 id="2-java语言有哪些特点"><a href="#2-java语言有哪些特点" class="headerlink" title="2.java语言有哪些特点"></a>2.java语言有哪些特点</h3><pre><code>面向对象（封装，集成，多态）平台无关 可靠性 安全性 支持多线程
</code></pre><h3 id="3-JVM、JDK、JRE"><a href="#3-JVM、JDK、JRE" class="headerlink" title="3.JVM、JDK、JRE"></a>3.JVM、JDK、JRE</h3><pre><code>JVM 虚拟机
JDK java SDK
JRE java 运行时环境
.java文件 --jdk中javac编译-&gt; .class文件（生成JVM可以理解的Java字节）--JVM--&gt;机器可以执行的二进制机器码
</code></pre><h3 id="4-OracleJDK-和OpenJDK对比"><a href="#4-OracleJDK-和OpenJDK对比" class="headerlink" title="4.OracleJDK 和OpenJDK对比"></a>4.OracleJDK 和OpenJDK对比</h3><pre><code>OpenJDK是开源的参考模型，OracleJDK是它的一个实现，不是完全开源的
OracleJDK比OpenJDK更稳定性能更好
许可协议OracleJDK二进制代码获得许可OpenJDKGPL v2获得
</code></pre><h3 id="5-Java和C-的区别"><a href="#5-Java和C-的区别" class="headerlink" title="5.Java和C++的区别"></a>5.Java和C++的区别</h3><h3 id="6-什么是Java程序的主类？应用程序和小程序的主类有和不同"><a href="#6-什么是Java程序的主类？应用程序和小程序的主类有和不同" class="headerlink" title="6.什么是Java程序的主类？应用程序和小程序的主类有和不同"></a>6.什么是Java程序的主类？应用程序和小程序的主类有和不同</h3><h3 id="7-Java应用程序与小程序之间差别"><a href="#7-Java应用程序与小程序之间差别" class="headerlink" title="7.Java应用程序与小程序之间差别"></a>7.Java应用程序与小程序之间差别</h3><h3 id="8-字符型常量和字符串常量的区别"><a href="#8-字符型常量和字符串常量的区别" class="headerlink" title="8.字符型常量和字符串常量的区别"></a>8.字符型常量和字符串常量的区别</h3><pre><code>形式上：‘’ “”
含义上：字符常量相当于一个整型值，字符串常量指地址值
内存大小不同，字符常量占2个字节，字符串占若干个
</code></pre><h3 id="9-构造器Constructor是否可以被Override？"><a href="#9-构造器Constructor是否可以被Override？" class="headerlink" title="9.构造器Constructor是否可以被Override？"></a>9.构造器Constructor是否可以被Override？</h3><pre><code>Constructor不可以被继承，所以不能被重写，但可以被overLoad。
</code></pre><h3 id="10-重载和重写的区别"><a href="#10-重载和重写的区别" class="headerlink" title="10.重载和重写的区别"></a>10.重载和重写的区别</h3><pre><code>重载
Add(String a)
Add(String a,int b)
Add(int a, String b)

重写
父类Private方法不能被重写
public String add（String a， String b）{}
子类
@Override (作用范围小于等于父类)
public String add（String a， String b）{}
</code></pre><h3 id="11-Java面向对象编程三大特性"><a href="#11-Java面向对象编程三大特性" class="headerlink" title="11.Java面向对象编程三大特性"></a>11.Java面向对象编程三大特性</h3><pre><code>封装：对象属性私有化，开放部分属性供外界访问
继承：继承父类
多态：程序引用变量方法调用在编程时不确定，运行期间才确定
实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）
</code></pre><h3 id="12-String-Stringbuffer-Stringbuilder的区别？String为什么是不可变的？"><a href="#12-String-Stringbuffer-Stringbuilder的区别？String为什么是不可变的？" class="headerlink" title="12.String Stringbuffer Stringbuilder的区别？String为什么是不可变的？"></a>12.String Stringbuffer Stringbuilder的区别？String为什么是不可变的？</h3><pre><code>区别           可变性  线程安全性  性能 
String           ×       √         
StringBuffer     √       √同步锁    
StringBuilder    √       ×          比StringBuffer10%-15%提升

1.操作少量的数据，使用String
2.单线程下操作大量数据，适用StringBuilder
3.多线程下操作大量数据，StringBuffer
</code></pre><h3 id="13-自动装箱与拆箱"><a href="#13-自动装箱与拆箱" class="headerlink" title="13.自动装箱与拆箱"></a>13.自动装箱与拆箱</h3><pre><code>装箱：将基本类型用他们对应的引用类型包装起来
拆箱：将包装类型转换为基本数据类型
</code></pre><h3 id="14-在静态方法内调用一个非静态成员为什么是非法的"><a href="#14-在静态方法内调用一个非静态成员为什么是非法的" class="headerlink" title="14.在静态方法内调用一个非静态成员为什么是非法的"></a>14.在静态方法内调用一个非静态成员为什么是非法的</h3><pre><code>静态方法里不能调用其他非静态变量，也不可以访问非静态变量成员。
</code></pre><h3 id="15-在JAVA中定义一个不做事且没有参数的构造方法的作用。"><a href="#15-在JAVA中定义一个不做事且没有参数的构造方法的作用。" class="headerlink" title="15.在JAVA中定义一个不做事且没有参数的构造方法的作用。"></a>15.在JAVA中定义一个不做事且没有参数的构造方法的作用。</h3><pre><code>如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 super() 来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。 　
</code></pre><h3 id="16-import-java和javax有什么区别？"><a href="#16-import-java和javax有什么区别？" class="headerlink" title="16.import java和javax有什么区别？"></a>16.import java和javax有什么区别？</h3><pre><code>实际上java和javax没有区别。这都是一个名字。
</code></pre><h3 id="17-接口和抽象类的区别是什么？"><a href="#17-接口和抽象类的区别是什么？" class="headerlink" title="17.接口和抽象类的区别是什么？"></a>17.接口和抽象类的区别是什么？</h3><pre><code>1.接口默认方法是public。所有方法在接口中不能有实现，而抽象类可以有非抽象方法
2.接口中除了static、final变量，不能有其他变量，而抽象类中不一定
3.一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过extends关键字扩展多个接口
4.接口方法默认修饰符是public，抽象方法可以有public、protected和default这些修饰符（抽象方法就是为了被重写，所以不能使用private）
5.从设计层面来讲，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为规范。
</code></pre><h3 id="18-成员变量与局部变量的区别？"><a href="#18-成员变量与局部变量的区别？" class="headerlink" title="18.成员变量与局部变量的区别？"></a>18.成员变量与局部变量的区别？</h3><pre><code>1.语法形式上，成员变量是属于类的，局部变量是在方法中定义的变量或是方法的参数。成员变量可以被public、private、static等修饰，而局部变量不能被访问控制修饰符以及static修饰，但是成员变量和局部变量都能被final修饰。
2.存储方式上,成员变量使用static修饰，那么这个成员变量是属于类的，如果没有static修饰，则属于实例的，而对象存在于堆内存，局部变量存在于占内存。
3.生存时间上，成员变量是对象的一部分，随对象的创建而存在，局部变量随方法的调用而自动消失
4.成员变量如果没有赋初值，会自动以类型的默认值而赋值（final修饰的成员变量也必须显式赋值），局部变量不会自动赋值。
</code></pre><h3 id="19。创建一个对象用什么运算符-对象实体与对象引用有何不同"><a href="#19。创建一个对象用什么运算符-对象实体与对象引用有何不同" class="headerlink" title="19。创建一个对象用什么运算符?对象实体与对象引用有何不同?"></a>19。创建一个对象用什么运算符?对象实体与对象引用有何不同?</h3><pre><code>new
new创建对象实例，对象实例在堆内存，对象引用指向对象实例，对象引用在栈内存。
</code></pre><h3 id="20-什么是方法的返回值-返回值在类的方法里的作用是什么"><a href="#20-什么是方法的返回值-返回值在类的方法里的作用是什么" class="headerlink" title="20. 什么是方法的返回值?返回值在类的方法里的作用是什么?"></a>20. 什么是方法的返回值?返回值在类的方法里的作用是什么?</h3><pre><code>返回值的作用:接收出结果，使得它可以用于其他的操作！
</code></pre><h3 id="21-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"><a href="#21-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么" class="headerlink" title="21. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?"></a>21. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?</h3><pre><code>主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。
</code></pre><h3 id="22-构造方法有哪些特性？"><a href="#22-构造方法有哪些特性？" class="headerlink" title="22. 构造方法有哪些特性？"></a>22. 构造方法有哪些特性？</h3><pre><code>1.名字与类名相同。
2.没有返回值，但不能用void声明构造函数。
3.生成类的对象时自动执行，无需调用。
</code></pre><h3 id="23-静态方法和实例方法有何不同"><a href="#23-静态方法和实例方法有何不同" class="headerlink" title="23. 静态方法和实例方法有何不同"></a>23. 静态方法和实例方法有何不同</h3><pre><code>在外部调用静态方法时，可以使用&quot;类名.方法名&quot;的方式，也可以使用&quot;对象名.方法名&quot;的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。
静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。
</code></pre>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[面试]]></title>
      <url>http://zhoufangy.github.io/2020/02/20/%E9%9D%A2%E8%AF%95/</url>
      <content type="html"><![CDATA[<h1 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h1>
<a href="/2020/02/20/12factor/" title="12factor">12factor</a>
<p>CAS<br>双清委派</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>git命令组</p>
<h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>AOP 动态代理<br>JDK代理：基于接口的代理，不支持类的代理。核心InvocationHandler接口和Proxy类，InvocationHandler 通过invoke()方法反射来调用目标类中的代码，动态地将横切逻辑和业务编织在一起；接着，Proxy利用 InvocationHandler动态创建一个符合某一接口的的实例,  生成目标类的代理对象<br>CGLIB动态代理：如果代理类没有实现 InvocationHandler 接口（或者说是基于父子类的），那么Spring AOP会选择使用CGLIB来动态代理目标类。CGLIB（Code Generation Library），是一个代码生成的类库，可以在运行时动态的生成指定类的一个子类对象，并覆盖其中特定方法并添加增强代码，从而实现AOP。CGLIB是通过继承的方式做的动态代理，因此如果某个类被标记为final，那么它是无法使用CGLIB做动态代理的</p>
<h1 id="SpringBoot-Srpingsecurity-jpa"><a href="#SpringBoot-Srpingsecurity-jpa" class="headerlink" title="SpringBoot Srpingsecurity jpa"></a>SpringBoot Srpingsecurity jpa</h1><h1 id="Mybitis"><a href="#Mybitis" class="headerlink" title="Mybitis"></a>Mybitis</h1><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h1 id="Http"><a href="#Http" class="headerlink" title="Http"></a>Http</h1><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><p>react vue flexible</p>
<h1 id="运维-nginx"><a href="#运维-nginx" class="headerlink" title="运维 nginx"></a>运维 nginx</h1><p>#</p>]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[12factor]]></title>
      <url>http://zhoufangy.github.io/2020/02/20/12factor/</url>
      <content type="html"><![CDATA[<h5 id="1-一份基准代码，多份部署"><a href="#1-一份基准代码，多份部署" class="headerlink" title="1.一份基准代码，多份部署"></a>1.一份基准代码，多份部署</h5><h5 id="2-显式声明依赖关系"><a href="#2-显式声明依赖关系" class="headerlink" title="2.显式声明依赖关系"></a>2.显式声明依赖关系</h5><h5 id="3-在环境中存储配置"><a href="#3-在环境中存储配置" class="headerlink" title="3.在环境中存储配置"></a>3.在环境中存储配置</h5><h5 id="4-把后端服务当作附加资源"><a href="#4-把后端服务当作附加资源" class="headerlink" title="4.把后端服务当作附加资源"></a>4.把后端服务当作附加资源</h5><h5 id="5-严格分离构建、发布和运行"><a href="#5-严格分离构建、发布和运行" class="headerlink" title="5.严格分离构建、发布和运行"></a>5.严格分离构建、发布和运行</h5><h5 id="6-以一个或多个无状态的进程运行应用"><a href="#6-以一个或多个无状态的进程运行应用" class="headerlink" title="6.以一个或多个无状态的进程运行应用"></a>6.以一个或多个无状态的进程运行应用</h5><h5 id="7-通过端口绑定提供服务"><a href="#7-通过端口绑定提供服务" class="headerlink" title="7.通过端口绑定提供服务"></a>7.通过端口绑定提供服务</h5><h5 id="8-通过进程模型进行扩展"><a href="#8-通过进程模型进行扩展" class="headerlink" title="8.通过进程模型进行扩展"></a>8.通过进程模型进行扩展</h5><h5 id="9-快速启动和优雅终止可最大化健壮性"><a href="#9-快速启动和优雅终止可最大化健壮性" class="headerlink" title="9.快速启动和优雅终止可最大化健壮性"></a>9.快速启动和优雅终止可最大化健壮性</h5><h5 id="10-开发环境与线上环境等价"><a href="#10-开发环境与线上环境等价" class="headerlink" title="10.开发环境与线上环境等价"></a>10.开发环境与线上环境等价</h5><h5 id="11-把日志当作事件流"><a href="#11-把日志当作事件流" class="headerlink" title="11.把日志当作事件流"></a>11.把日志当作事件流</h5><h5 id="12-后台管理任务当作一次性进程运行"><a href="#12-后台管理任务当作一次性进程运行" class="headerlink" title="12.后台管理任务当作一次性进程运行"></a>12.后台管理任务当作一次性进程运行</h5>]]></content>
      
        <categories>
            
            <category> 概念 </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[Travis CI 自动部署Hexo博客至Github]]></title>
      <url>http://zhoufangy.github.io/2020/02/15/Travis-CI-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E8%87%B3Github/</url>
      <content type="html"><![CDATA[<h5 id="1-Github配置"><a href="#1-Github配置" class="headerlink" title="1.Github配置"></a>1.Github配置</h5><p>Github创建项目xxx.github.io,master为静态页面展示项目，code为hexo代码。</p>
<h5 id="2-Travis-CI配置"><a href="#2-Travis-CI配置" class="headerlink" title="2.Travis CI配置"></a>2.Travis CI配置</h5><p> 用 Github 账号注册并登录 Travis CI，配置好 Travis CI 在 Github 的权限和 Token。</p>
<h5 id="3-在code分支下新建配置文件-travis-yml"><a href="#3-在code分支下新建配置文件-travis-yml" class="headerlink" title="3.在code分支下新建配置文件 .travis.yml"></a>3.在code分支下新建配置文件 .travis.yml</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo: <span class="literal">false</span></span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 </span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - code <span class="comment"># 当hexo分支有新的commit时执行 </span></span><br><span class="line">script:</span><br><span class="line">  - hexo generate </span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: <span class="literal">true</span></span><br><span class="line">  <span class="built_in">local</span>-dir: public</span><br><span class="line">  target-branch: master <span class="comment"># 注意这里是部署到master, 默认是到gh-pages</span></span><br><span class="line">  github-token: <span class="variable">$GH_TOKEN</span></span><br><span class="line">  keep-history: <span class="literal">true</span></span><br><span class="line">  on:</span><br><span class="line">    branch: code <span class="comment"># 博客的源码分支</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h5 id="4-推送代码至code分支，完成部署"><a href="#4-推送代码至code分支，完成部署" class="headerlink" title="4.推送代码至code分支，完成部署"></a>4.推送代码至code分支，完成部署</h5><h5 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h5><p><a href="https://blog.csdn.net/badcow/article/details/102503102" target="_blank" rel="noopener">https://blog.csdn.net/badcow/article/details/102503102</a></p>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo迁移报错目录丢失Cannot GET /]]></title>
      <url>http://zhoufangy.github.io/2020/02/15/Hexo%E8%BF%81%E7%A7%BB%E6%8A%A5%E9%94%99%E7%9B%AE%E5%BD%95%E4%B8%A2%E5%A4%B1Cannot-GET/</url>
      <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>迁移Hexo后部署主页丢失，访问目录报Cannot GET /。index页面可单独访问</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>检查缺失组建<br>npm audit fix<br>更新<br>npm install</p>]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[更新Xcode后Git报错]]></title>
      <url>http://zhoufangy.github.io/2020/02/15/%E6%9B%B4%E6%96%B0Xcode%E5%90%8EGit%E6%8A%A5%E9%94%99/</url>
      <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>Accept Xcode/iOS license to Run Git</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>终端输入sudo xcodebuild -license<br>输入密码后同意条款,用空格键跳到最后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">By typing <span class="string">'agree'</span> you are agreeing to the terms of the software license agreements. Type <span class="string">'print'</span> to <span class="built_in">print</span> them or anything <span class="keyword">else</span> to cancel, [agree, <span class="built_in">print</span>, cancel] agree</span><br><span class="line"></span><br><span class="line">You can view the license agreements <span class="keyword">in</span> Xcode<span class="string">'s About Box, or at /Applications/Xcode.app/Contents/Resources/English.lproj/License.rtf</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git 报错 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GoAccess使用]]></title>
      <url>http://zhoufangy.github.io/2016/06/28/goaccess/</url>
      <content type="html"><![CDATA[<h3 id="关于GoAccess"><a href="#关于GoAccess" class="headerlink" title="关于GoAccess"></a>关于GoAccess</h3><a href="https://goaccess.io/" title="GoAccess" target="_blank" rel="noopener">GoAccess</a>是一个开源的实时Web日志分析工具，能将有价值的HTTP统计数据生成可视化动态报告.<br><a id="more"></a>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载</span></span><br><span class="line">wget http://tar.goaccess.io/goaccess-1.0.1.tar.gz</span><br><span class="line">tar -zxvf goaccess-1.0.1.tar.gz</span><br><span class="line"><span class="built_in">cd</span> goaccess-1.0.1/</span><br><span class="line"><span class="comment">#安装依赖包</span></span><br><span class="line">apt-get install libncursesw5-dev</span><br><span class="line">apt-get install libgeoip-dev</span><br><span class="line">./configure --<span class="built_in">enable</span>-geoip --<span class="built_in">enable</span>-utf8</span><br><span class="line"><span class="comment">#C系安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改goaccess.conf中必选项</span></span><br><span class="line">vim /usr/<span class="built_in">local</span>/etc/goaccess.conf</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># Time Format Options (required)</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line">time-format %H:%M:%S</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># Date Format Options (required)</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line">date-format %d/%b/%Y</span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="comment"># Log Format Options (required)</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line"><span class="built_in">log</span>-format %h %^[%d:%t %^] <span class="string">"%r"</span> %s %b <span class="string">"%R"</span> <span class="string">"%u"</span></span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#处理需要分析的日志文件</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/openresty/nginx/logs/</span><br><span class="line">goaccess -f access.log -o report.html --real-time-html --ws-url=goaccess.io</span><br><span class="line"><span class="comment">#Python创建简单HTTP服务用于访问</span></span><br><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> GoAccess </category>
            
            <category> 日志分析 </category>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GoAccess </tag>
            
            <tag> 日志分析 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置https]]></title>
      <url>http://zhoufangy.github.io/2016/06/15/https/</url>
      <content type="html"><![CDATA[<h3 id="1-申请SSL证书"><a href="#1-申请SSL证书" class="headerlink" title="1.申请SSL证书"></a>1.申请SSL证书</h3><p>WoSign证书申请：阿里云/官网-&gt;注册-&gt;下载密钥</p>
<h3 id="2-新增zhoufangyuan-conf"><a href="#2-新增zhoufangyuan-conf" class="headerlink" title="2.新增zhoufangyuan.conf"></a>2.新增zhoufangyuan.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 利用HSTS实现HTTP-&gt;HTTPS</span></span><br><span class="line">map <span class="variable">$scheme</span> <span class="variable">$hsts_header</span> &#123;</span><br><span class="line">    https   max-age=31536000;includeSubdomains; preload;</span><br><span class="line">&#125;        </span><br><span class="line">server &#123;</span><br><span class="line">        listen 80; </span><br><span class="line">        listen 443 ssl; </span><br><span class="line">        server_name zhoufangy.github.io;</span><br><span class="line">        ssl on;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#指定证书文件 </span></span><br><span class="line">        ssl_certificate      /usr/<span class="built_in">local</span>/openresty/nginx/sslkey/cert.pem;</span><br><span class="line">        ssl_certificate_key  /usr/<span class="built_in">local</span>/openresty/nginx/sslkey/cert.key;</span><br><span class="line">    </span><br><span class="line">        ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">    </span><br><span class="line">        ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                root /home/www/zhoufangy.github.io/;</span><br><span class="line">                index  index.html index.htm;</span><br><span class="line">                &#125;</span><br><span class="line">        <span class="comment">#增加响应头，浏览器自动以HTTPS访问</span></span><br><span class="line">        add_header Strict-Transport-Security <span class="variable">$hsts_header</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3-将zhoufangyuan-conf引入ngnix-conf"><a href="#3-将zhoufangyuan-conf引入ngnix-conf" class="headerlink" title="3.将zhoufangyuan.conf引入ngnix.conf"></a>3.将zhoufangyuan.conf引入ngnix.conf</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include vhost/*.conf;</span><br></pre></td></tr></table></figure>
<h3 id="4-重新加载ngnix"><a href="#4-重新加载ngnix" class="headerlink" title="4.重新加载ngnix"></a>4.重新加载ngnix</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service openresty reload</span><br></pre></td></tr></table></figure>
<h3 id="5-HTTP-gt-HTTPS几种方法"><a href="#5-HTTP-gt-HTTPS几种方法" class="headerlink" title="5.HTTP-&gt;HTTPS几种方法"></a>5.HTTP-&gt;HTTPS几种方法</h3><p>#return 301<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80; </span><br><span class="line">        server_name  zhoufangy.github.io;</span><br><span class="line">        <span class="built_in">return</span> 301 https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<p>#rewrite重写<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80; </span><br><span class="line">        server_name  zhoufangy.github.io;</span><br><span class="line">        rewrite ^(.*)$ https://<span class="variable">$server_name</span><span class="variable">$1</span> permanent;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></p>
<p>#error_page 497<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">   server &#123;  </span><br><span class="line">    listen 443;  <span class="comment">#ssl端口  </span></span><br><span class="line">    listen 80;   <span class="comment">#用户习惯用http访问，加上80，后面通过497状态码让它自动跳到443端口  </span></span><br><span class="line">    server_name  zhoufangy.github.io;  </span><br><span class="line">    <span class="comment">#为一个server&#123;......&#125;开启ssl支持  </span></span><br><span class="line">    ssl    on;  </span><br><span class="line">    <span class="comment">#指定证书文件   </span></span><br><span class="line">    ssl_certificate      /usr/<span class="built_in">local</span>/openresty/nginx/sslkey/cert.pem;</span><br><span class="line">    ssl_certificate_key  /usr/<span class="built_in">local</span>/openresty/nginx/sslkey/cert.key;</span><br><span class="line">    <span class="comment">#让http请求重定向到https请求   </span></span><br><span class="line">    error_page 497  https://<span class="variable">$host</span><span class="variable">$uri</span>?<span class="variable">$args</span>;  </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<p>#index.html 刷新网页<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"># index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"0;url=https://zhoufangy.github.io/"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"># zhoufangyuan.conf</span><br><span class="line"></span><br><span class="line">server &#123;  </span><br><span class="line">    listen 80;  </span><br><span class="line">    server_name zhoufangy.github.io;  </span><br><span class="line">      </span><br><span class="line">    location / &#123;  </span><br><span class="line">        #index.html放在虚拟主机监听的根目录下  </span><br><span class="line">        root /home/www/zhoufangy.github.io/;  </span><br><span class="line">    &#125;</span><br><span class="line">    #将404的页面重定向到https的首页</span><br><span class="line">    error_page  404 https://zhoufangy.github.io/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>以上四种方法<br>https访问网站正常,http跳转https失败,curl访问正常,浏览器访问失败</p>
<h1 id="HSTS强制HTTPS访问"><a href="#HSTS强制HTTPS访问" class="headerlink" title="HSTS强制HTTPS访问"></a>HSTS强制HTTPS访问</h1><a href="https://trac.nginx.org/nginx/ticket/289#comment:3" title="参 考资料" target="_blank" rel="noopener">参考资料</a>]]></content>
      
        <categories>
            
            <category> HTTPS </category>
            
            <category> Nginx </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[多个商品条目批量选中上架时判断售后模板是否为空]]></title>
      <url>http://zhoufangy.github.io/2016/06/13/checkbox/</url>
      <content type="html"><![CDATA[<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>获取选中checkbox长度<br>获取选中条目对应非空售后模板长度<br>两者比较大小<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getcheckAllSiblingsVal</span>(<span class="params">name,cls</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> prams = $(<span class="string">"table input:checkbox[name='"</span>+name+<span class="string">"']:checked"</span>).parent()</span><br><span class="line">	            .parent().siblings(<span class="string">"."</span>+cls+<span class="string">""</span>);</span><br><span class="line">	<span class="keyword">var</span> nameLength = $(<span class="string">"table input:checkbox[name='"</span>+name+<span class="string">"']:checked"</span>).length;</span><br><span class="line">	<span class="keyword">var</span> len = prams.length;</span><br><span class="line">	<span class="keyword">var</span> pramLength = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(len&gt;<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="string">""</span>!=prams.eq(i).text())&#123;</span><br><span class="line">				pramLength+=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">parseInt</span>(pramLength)&lt;<span class="built_in">parseInt</span>(nameLength))&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
        <categories>
            
            <category> JQuery </category>
            
            <category> checkbox </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JQuery </tag>
            
            <tag> checkbox </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OpenResty使用]]></title>
      <url>http://zhoufangy.github.io/2016/06/06/openresty/</url>
      <content type="html"><![CDATA[<h3 id="1-安装编译"><a href="#1-安装编译" class="headerlink" title="1.安装编译"></a>1.安装编译</h3><a href="http://openresty.org/cn/download.html" title="openResty" target="_blank" rel="noopener">OpenResty官网下载安装包openresty-1.x.x.x.tar.gz</a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#解压</span></span><br><span class="line">tar -xzvf openresty-1.x.x.x.tar.gz</span><br><span class="line"><span class="comment">#安装</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make instal</span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">sudo service openresty -c /usr/<span class="built_in">local</span>/openresty/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件地址：/usr/local/openresty/nginx/conf/nginx.conf</span></span><br><span class="line"><span class="comment">#修改</span></span><br><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name zhoufangy.github.io, www.zhoufangy.github.io;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass              http://0.0.0.0:4000/;</span><br><span class="line">            proxy_redirect          off;</span><br><span class="line">            proxy_set_header        X-Real-IP       <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-加载重新配置的nginx文件并启动"><a href="#3-加载重新配置的nginx文件并启动" class="headerlink" title="3.加载重新配置的nginx文件并启动"></a>3.加载重新配置的nginx文件并启动</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/openresty/nginx/sbin/nginx  -c /usr/<span class="built_in">local</span>/openresty/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<h3 id="3-管理openresty"><a href="#3-管理openresty" class="headerlink" title="3.管理openresty"></a>3.管理openresty</h3><a href="https://fzrxefe.googlecode.com/files/openresty.init.d.script" title="[external] [OpenResty]" target="_blank" rel="noopener">google code</a>下载init.d 重命名openresty，放到服务器/etc/init.d目录下<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /etc/init.d/openresty</span><br><span class="line">sudo update-rc.d openresty defaults</span><br><span class="line"><span class="comment">#启动Nginx:</span></span><br><span class="line">sudo service openresty start</span><br><span class="line"><span class="comment">#停止Nginx:</span></span><br><span class="line">sudo service openresty stop</span><br><span class="line"><span class="comment">#重启Nginx:</span></span><br><span class="line">sudo service openresty restart</span><br><span class="line"><span class="comment">#测试配置文件:</span></span><br><span class="line">sudo service openresty <span class="built_in">test</span></span><br></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> OpenResty </category>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> OpenResty </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA SVN 更新报错]]></title>
      <url>http://zhoufangy.github.io/2016/05/23/SSL/</url>
      <content type="html"><![CDATA[<h2 id="Error-Server-SSL-certificate-rejected"><a href="#Error-Server-SSL-certificate-rejected" class="headerlink" title="Error:Server SSL certificate rejected"></a>Error:Server SSL certificate rejected</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>更新报错，SSL失效<br><a id="more"></a></p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>SVN 设置 -&gt; 已保存数据 -&gt;清除认证数据 -&gt; 更新 -&gt; 输入账户信息</p>
<p><img src="http://zhoufangy.github.io/images/svnSet.png" alt="证物"></p>]]></content>
      
        <categories>
            
            <category> IntelliJ IDEA </category>
            
            <category> SVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
            <tag> SVN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring-mvc-lazybone 学习笔记]]></title>
      <url>http://zhoufangy.github.io/2016/05/19/spring-mvc-lazybone/</url>
      <content type="html"><![CDATA[<h2 id="1-搭建一个Maven项目"><a href="#1-搭建一个Maven项目" class="headerlink" title="1.搭建一个Maven项目"></a>1.搭建一个Maven项目</h2>]]></content>
      
        <categories>
            
            <category> Maven </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[IntelliJ IDEA SVN 提交被终止后无法提交文件问题]]></title>
      <url>http://zhoufangy.github.io/2016/05/11/commit/</url>
      <content type="html"><![CDATA[<h2 id="Default和Rejected-Commit-Default"><a href="#Default和Rejected-Commit-Default" class="headerlink" title="Default和Rejected Commit Default"></a>Default和Rejected Commit Default</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>提交后取消，不能提交问题</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>当提交后取消再提交时需要更改Change list 状态为Rejected Commit Default<br><a id="more"></a><br><img src="http://zhoufangy.github.io/images/Default.PNG" alt="证物"></p>]]></content>
      
        <categories>
            
            <category> IntelliJ IDEA </category>
            
            <category> SVN </category>
            
        </categories>
        
        
        <tags>
            
            <tag> IntelliJ IDEA </tag>
            
            <tag> SVN </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://zhoufangy.github.io/2016/05/09/hello-world/</url>
      <content type="html"><![CDATA[<p>o(╯□╰)o，不知道说啥，嗯，就这样吧~</p>]]></content>
      
        
    </entry>
    
  
  
</search>
